{\rtf1\ansi\ansicpg1252\cocoartf2576
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red180\green36\blue25;\red0\green0\blue0;\red242\green242\blue242;
}
{\*\expandedcolortbl;;\cssrgb\c76410\c21699\c12524;\csgray\c0\c85000;\csgray\c95825;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww20620\viewh18600\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs20 \cf2 \cb3 \CocoaLigature0 $ \cf4 kubectl get pods\
NAME                                READY   STATUS    RESTARTS   AGE\
reverse-proxy-69c856dbfc-vqs8c      1/1     Running   0          20h\
udagram-feed-5644bcdc6f-58vn8       1/1     Running   0          2d16h\
udagram-feed-5644bcdc6f-qbsg4       1/1     Running   0          6m8s\
udagram-frontend-864f96454f-ff59c   1/1     Running   0          48m\
udagram-users-89777d5f7-jt9p8       1/1     Running   0          2d15h\
\cf2 $ \cf4 kubectl get services\
NAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\
feed-svc            ClusterIP   10.100.184.141   <none>        8080/TCP   2d14h\
frontend-svc        ClusterIP   10.100.179.72    <none>        80/TCP     24m\
kubernetes          ClusterIP   10.100.0.1       <none>        443/TCP    7d1h\
reverse-proxy-svc   ClusterIP   10.100.202.228   <none>        8080/TCP   20h\
users-svc           ClusterIP   10.100.167.186   <none>        8080/TCP   2d14h\
\cf2 $ \cf4 kubectl describe services\
Name:              feed-svc\
Namespace:         default\
Labels:            app=udagram-feed\
Annotations:       <none>\
Selector:          app=udagram-feed\
Type:              ClusterIP\
IP:                10.100.184.141\
Port:              <unset>  8080/TCP\
TargetPort:        8080/TCP\
Endpoints:         172.31.13.192:8080,172.31.16.146:8080\
Session Affinity:  None\
Events:            <none>\
\
\
Name:              frontend-svc\
Namespace:         default\
Labels:            app=udagram-frontend\
Annotations:       <none>\
Selector:          app=udagram-frontend\
Type:              ClusterIP\
IP:                10.100.179.72\
Port:              <unset>  80/TCP\
TargetPort:        80/TCP\
Endpoints:         172.31.42.63:80\
Session Affinity:  None\
Events:            <none>\
\
\
Name:              kubernetes\
Namespace:         default\
Labels:            component=apiserver\
                   provider=kubernetes\
Annotations:       <none>\
Selector:          <none>\
Type:              ClusterIP\
IP:                10.100.0.1\
Port:              https  443/TCP\
TargetPort:        443/TCP\
Endpoints:         172.31.47.158:443,172.31.5.162:443\
Session Affinity:  None\
Events:            <none>\
\
\
Name:              reverse-proxy-svc\
Namespace:         default\
Labels:            app=reverse-proxy\
Annotations:       <none>\
Selector:          app=reverse-proxy\
Type:              ClusterIP\
IP:                10.100.202.228\
Port:              8080  8080/TCP\
TargetPort:        8080/TCP\
Endpoints:         172.31.34.239:8080\
Session Affinity:  None\
Events:            <none>\
\
\
Name:              users-svc\
Namespace:         default\
Labels:            app=udagram-users\
Annotations:       <none>\
Selector:          app=udagram-users\
Type:              ClusterIP\
IP:                10.100.167.186\
Port:              <unset>  8080/TCP\
TargetPort:        8080/TCP\
Endpoints:         172.31.11.209:8080\
Session Affinity:  None\
Events:            <none>\
\cf2 $ \cf4 kubectl describe hpa\
Name:                                                  udagram-users\
Namespace:                                             default\
Labels:                                                <none>\
Annotations:                                           <none>\
CreationTimestamp:                                     Mon, 23 Nov 2020 09:59:20 +0000\
Reference:                                             Deployment/udagram-users\
Metrics:                                               ( current / target )\
  resource cpu on pods  (as a percentage of request):  <unknown> / 80%\
Min replicas:                                          1\
Max replicas:                                          2\
Deployment pods:                                       1 current / 0 desired\
Conditions:\
  Type           Status  Reason                   Message\
  ----           ------  ------                   -------\
  AbleToScale    True    SucceededGetScale        the HPA controller was able to get the target's current scale\
  ScalingActive  False   FailedGetResourceMetric  the HPA was unable to compute the replica count: unable to get metrics for resource cpu: unable to fetch metrics from resource metrics API: the server could not find the requested resource (get pods.metrics.k8s.io)\
Events:\
  Type     Reason                        Age               From                       Message\
  ----     ------                        ----              ----                       -------\
  Warning  FailedGetResourceMetric       2s (x6 over 78s)  horizontal-pod-autoscaler  unable to get metrics for resource cpu: unable to fetch metrics from resource metrics API: the server could not find the requested resource (get pods.metrics.k8s.io)\
  Warning  FailedComputeMetricsReplicas  2s (x6 over 78s)  horizontal-pod-autoscaler  invalid metrics (1 invalid out of 1), first error is: failed to get cpu utilization: unable to get metrics for resource cpu: unable to fetch metrics from resource metrics API: the server could not find the requested resource (get pods.metrics.k8s.io)\
\cf2 $ \cf4 kubectl logs udagram-feed-5644bcdc6f-58vn8\
\
> udagram-api@2.0.0 dev /usr/src/app\
> ts-node-dev --respawn --transpileOnly ./src/server.ts\
\
Using ts-node version 8.0.3, typescript version 3.3.4000\
Executing (default): CREATE TABLE IF NOT EXISTS "FeedItem" ("id"   SERIAL , "caption" VARCHAR(255), "url" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE, "updatedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));\
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'FeedItem' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;\
server running http://localhost:8080\
press CTRL+C to stop server\
Executing (default): SELECT count(*) AS "count" FROM "FeedItem" AS "FeedItem";\
Executing (default): SELECT "id", "caption", "url", "createdAt", "updatedAt" FROM "FeedItem" AS "FeedItem" ORDER BY "FeedItem"."id" DESC;\
Executing (default): SELECT count(*) AS "count" FROM "FeedItem" AS "FeedItem";\
Executing (default): SELECT "id", "caption", "url", "createdAt", "updatedAt" FROM "FeedItem" AS "FeedItem" ORDER BY "FeedItem"."id" DESC;\
Executing (default): SELECT count(*) AS "count" FROM "FeedItem" AS "FeedItem";\
Executing (default): SELECT "id", "caption", "url", "createdAt", "updatedAt" FROM "FeedItem" AS "FeedItem" ORDER BY "FeedItem"."id" DESC;\
Executing (default): SELECT count(*) AS "count" FROM "FeedItem" AS "FeedItem";\
Executing (default): SELECT "id", "caption", "url", "createdAt", "updatedAt" FROM "FeedItem" AS "FeedItem" ORDER BY "FeedItem"."id" DESC;\
Executing (default): SELECT count(*) AS "count" FROM "FeedItem" AS "FeedItem";\
Executing (default): SELECT "id", "caption", "url", "createdAt", "updatedAt" FROM "FeedItem" AS "FeedItem" ORDER BY "FeedItem"."id" DESC;\
Executing (default): SELECT count(*) AS "count" FROM "FeedItem" AS "FeedItem";\
Executing (default): SELECT "id", "caption", "url", "createdAt", "updatedAt" FROM "FeedItem" AS "FeedItem" ORDER BY "FeedItem"."id" DESC;\
Executing (default): SELECT count(*) AS "count" FROM "FeedItem" AS "FeedItem";\
Executing (default): SELECT "id", "caption", "url", "createdAt", "updatedAt" FROM "FeedItem" AS "FeedItem" ORDER BY "FeedItem"."id" DESC;\
Executing (default): SELECT count(*) AS "count" FROM "FeedItem" AS "FeedItem";\
Executing (default): SELECT "id", "caption", "url", "createdAt", "updatedAt" FROM "FeedItem" AS "FeedItem" ORDER BY "FeedItem"."id" DESC;\
Executing (default): SELECT count(*) AS "count" FROM "FeedItem" AS "FeedItem";\
Executing (default): SELECT "id", "caption", "url", "createdAt", "updatedAt" FROM "FeedItem" AS "FeedItem" ORDER BY "FeedItem"."id" DESC;\
\cf2 $ \cf4 kubectl logs udagram-users-89777d5f7-jt9p8\
\
> udagram-api@2.0.0 dev /usr/src/app\
> ts-node-dev --respawn --transpileOnly ./src/server.ts\
\
Using ts-node version 8.0.3, typescript version 3.3.4000\
Executing (default): CREATE TABLE IF NOT EXISTS "User" ("email" VARCHAR(255) , "password_hash" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE, "updatedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("email"));\
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'User' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;\
server running http://localhost:8080\
press CTRL+C to stop server\
Executing (default): SELECT "email", "password_hash", "createdAt", "updatedAt" FROM "User" AS "User" WHERE "User"."email" = 'hello1@gmail.com';\
Executing (default): SELECT "email", "password_hash", "createdAt", "updatedAt" FROM "User" AS "User" WHERE "User"."email" = 'hello1@gmail.com';\
Executing (default): SELECT "email", "password_hash", "createdAt", "updatedAt" FROM "User" AS "User" WHERE "User"."email" = 'hello1@gmail.com';}